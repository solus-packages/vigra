<PISI>
    <Source>
        <Name>vigra</Name>
        <Packager>
            <Name>Pierre-Yves</Name>
            <Email>pyu@riseup.net</Email>
        </Packager>
        <License>MIT</License>
        <PartOf>multimedia.library</PartOf>
        <Summary xml:lang="en">C++ library for image analysis</Summary>
        <Description xml:lang="en">VIGRA is a computer vision library that puts its main emphasis on flexible algorithms, because algorithms represent the principal know-how of this field. The library was consequently built using generic programming as introduced by Stepanov and Musser and exemplified in the C++ Standard Template Library. By writing a few adapters (image iterators and accessors) you can use VIGRA&apos;s algorithms on top of your data structures, within your environment. Alternatively, you can also use the data structures provided within VIGRA, which can be easily adapted to a wide range of applications. VIGRA&apos;s flexibility comes almost for free: Since the design uses compile-time polymorphism (templates), performance of the compiled program approaches that of a traditional, hand tuned, inflexible, solution.
</Description>
        <Archive type="binary" sha1sum="79eb0752a961b8e0d15c77d298c97498fbc89c5a">https://solus-project.com/sources/README.Solus</Archive>
    </Source>
    <Package>
        <Name>vigra</Name>
        <Summary xml:lang="en">C++ library for image analysis</Summary>
        <Description xml:lang="en">VIGRA is a computer vision library that puts its main emphasis on flexible algorithms, because algorithms represent the principal know-how of this field. The library was consequently built using generic programming as introduced by Stepanov and Musser and exemplified in the C++ Standard Template Library. By writing a few adapters (image iterators and accessors) you can use VIGRA&apos;s algorithms on top of your data structures, within your environment. Alternatively, you can also use the data structures provided within VIGRA, which can be easily adapted to a wide range of applications. VIGRA&apos;s flexibility comes almost for free: Since the design uses compile-time polymorphism (templates), performance of the compiled program approaches that of a traditional, hand tuned, inflexible, solution.
</Description>
        <PartOf>multimedia.library</PartOf>
        <Files>
            <Path fileType="executable">/usr/bin</Path>
            <Path fileType="library">/usr/lib/lib*.so.*</Path>
            <Path fileType="library">/usr/lib/vigra/VigraConfig.cmake</Path>
            <Path fileType="library">/usr/lib/vigra/VigraConfigVersion.cmake</Path>
            <Path fileType="library">/usr/lib/vigra/vigra-targets-relwithdebinfo.cmake</Path>
            <Path fileType="library">/usr/lib/vigra/vigra-targets.cmake</Path>
            <Path fileType="doc">/usr/share/doc</Path>
        </Files>
    </Package>
    <Package>
        <Name>vigra-devel</Name>
        <Summary xml:lang="en">Development files for vigra</Summary>
        <Description xml:lang="en">VIGRA is a computer vision library that puts its main emphasis on flexible algorithms, because algorithms represent the principal know-how of this field. The library was consequently built using generic programming as introduced by Stepanov and Musser and exemplified in the C++ Standard Template Library. By writing a few adapters (image iterators and accessors) you can use VIGRA&apos;s algorithms on top of your data structures, within your environment. Alternatively, you can also use the data structures provided within VIGRA, which can be easily adapted to a wide range of applications. VIGRA&apos;s flexibility comes almost for free: Since the design uses compile-time polymorphism (templates), performance of the compiled program approaches that of a traditional, hand tuned, inflexible, solution.
</Description>
        <PartOf>programming.devel</PartOf>
        <RuntimeDependencies>
            <Dependency release="4">vigra</Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="header">/usr/include/</Path>
            <Path fileType="library">/usr/lib/lib*.so</Path>
        </Files>
    </Package>
    <History>
        <Update release="4">
            <Date>2018-03-02</Date>
            <Version>1.11.1</Version>
            <Comment>Packaging update</Comment>
            <Name>Pierre-Yves</Name>
            <Email>pyu@riseup.net</Email>
        </Update>
    </History>
</PISI>